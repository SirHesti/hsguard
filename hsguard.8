'\" t
.\" Automatically generated by Pandoc 2.17.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "hsguard" "8" "16.06.2025" "hsguard 2.24.59 Beta" "hsguard - coded by Hesti"
.hy
.SH NAME
.PP
\f[B]hsguard\f[R] - Programm um Aenderungen im Dateisystem festzustellen
.SH SYNOPSIS
.PP
switch to german translation [Translation status]
.PP
About
.PP
hsguard stellt aus den konfigurierbaren Verzeichnisse eine Datenbank
zusammen.
Dabei wird jede Datei f\[:u]r sich gepr\[:u]ft und eine
CRC-Pr\[:u]fsumme (OLDSTYLE) erstellt.
Ist die Festplatte erst einmal in der Datenbank, dann kann jede Datei
auf (nicht gewollte) \[:A]nderungen gepr\[:u]ft werden.
.PP
Genau das ist der Zweck von hsguard.
Festplatten (HDD) altern und wenn Daten nicht gelesen werden, dann
`vergisst' die Festplatte mal ein Bit.
.PP
Bei mir laufen HDD\[cq]s rund um die Uhr als Backupsystem, lokales
Filesharing etc..
Daten auf diesen Platten m\[:o]chte ich auch nach vielen Jahren
behalten.
.PP
Zus\[:a]tzlich kann so erkannt werden, ob eine Malware gerade dabei ist
s\[:a]mtliche Daten zu verschl\[:u]sseln.
.PP
Hier greift \[lq]hsguard\[rq].
hsguard speichert alle wichtigen Informationen zu einer Datei.
Eine Datei die ge\[:a]ndert wurde, wird in der Datenbank normal
geupdatet.
\[:U]ber jede Datei wird eine CRC32 gebildet.
Die Pr\[:u]fsumme wird pro Datei gespeichert und kann gegengepr\[:u]ft
werden.
.PP
Es wird Position, Name, FileSize, FileModifDate und die CRC32
gespeichert.
Pr\[:u]fcounter und Aufnahmedatum k\[:o]nnen aus der Datenbank ebenfalls
abgerufen werden.
.PP
Im CronJob kann hsguard [\[en]update] \[en]check aufgerufen werden, wo
verschiedene Dateien dann gegengepr\[:u]ft werden k\[:o]nnen.
Diese werden im Zufallsprinzip ausgew\[:a]hlt.
Ein Update nimmt neue oder ge\[:a]nderte Dateien vorher auf.
.PP
Mit vielen M\[:o]glichkeiten k\[:o]nnen die Daten aufgelistet und
verifiziert werden.
So wird im Fall des Falles die Datenbank eine hilfreiche Erg\[:a]nzung
sein.
.PP
WICHTIG!
hsguard wird keine Festplatteninhalte \[:a]ndern.
Keine Datei l\[:o]schen oder hinzuf\[:u]gen.
Die einzige Ausnahme ist die Datenbank selsbt.
\[lq]hsguard \[en]create\[rq] wird einmalig eine hsguard.rc anlegen.
Diese Datei wird nicht \[:u]berschrieben.
Alle Parameter k\[:o]nnen aber auch auf der Kommandozeile angegeben
werden.
.PP
hsguard ben\[:o]tigt lediglich Leserechte f\[:u]r die Daten.
.PP
hsguard kann auf vielf\[:a]ltig configuriert werden.
Configdatei, Excludedatei und Kommandozeilenswitch.
.PP
Wird hsguard das erste Mal gestartet, dann wird die Datei
/etc/hsguard.rc fehlend bem\[:a]ngelt.
Mit \[lq]hsguard \[en]create\[rq] kann eine erste Version mitsamt einen
Unterverzeichnis /var/hsguard erstellt werden.
Ein Beispiel kann in der Datei hsguard_sample.rc nachgeschlagen werden.
.SH DESCRIPTION
.PP
hsguard liest das Dateisystem ein und speichert rudiment\[:a]re Daten.
Sofern nicht vorhanden/ge\[:a]ndert(fsize/mtime) wird eine CRC32 der
Datei gebildet.
Diese wird gegengepr\[:u]ft und ggf.
Alarm geschlagen.
.SH OPTIONS
.IP \[bu] 2
\f[B]--help -?
-h \f[R]
.RS 2
.RS
Print this helpmsg
.RE
.RE
.IP \[bu] 2
\f[B]-d --db sqlite3.db \f[R]
.RS 2
.RS
use this \[lq][PATH/]sqlite3.db\[rq] database \f[B]overwrite:
RCdatabase\f[R]
.RE
.RE
.IP \[bu] 2
\f[B]-b --base <dir> \f[R]
.RS 2
.RS
basedir for all operations \f[B]overwrite RCbase\f[R]
.RE
.RE
.IP \[bu] 2
\f[B]--create \f[R]
.RS 2
.RS
create an empty ConfigFile highcommand to edit this
.RE
.RE
.IP \[bu] 2
\f[B]--initdb \f[R]
.RS 2
.RS
create an empty Database
.RE
.RE
.IP \[bu] 2
\f[B]--createExcl \f[R]
.RS 2
.RS
create an example excludefile
.RE
.RE
.IP \[bu] 2
\f[B]-x --exclude <file> \f[R]
.RS 2
.RS
read a list of excluded files -- `#' comment ## \f[B]add this list:
RCexclude\f[R]
.RE
.RE
.IP \[bu] 2
\f[B]--exclude_add <file> \f[R]
.RS 2
.RS
add a single file/dir to excludelist \f[B]works too: RCexadd\f[R]
.RE
.RE
.IP \[bu] 2
\f[B]--ldir/--edir <dir> \f[R]
.RS 2
.RS
an LS for exclude file writers (NO Function on DB)
.RE
.RE
.IP \[bu] 2
\f[B]--update_deep <num> \f[R]
.RS 2
.RS
update database only this deep (update will set)
.RE
.RE
.IP \[bu] 2
\f[B]--update_dir <dir> \f[R]
.RS 2
.RS
update from here into database (update will set)
.RE
.RE
.IP \[bu] 2
\f[B]-u --update \f[R]
.RS 2
.RS
update database
.RE
.RE
.IP \[bu] 2
\f[B]--rescan \f[R]
.RS 2
.RS
update all, but reread crc32
.RE
.RE
.IP \[bu] 2
\f[B]-n --nodirtest \f[R]
.RS 2
.RS
update will \f[I]not\f[R] scan for empty dirs otherwise no exists
.PD 0
.P
.PD
dirs(and entries) will remove from database
.RE
.RE
.IP \[bu] 2
\f[B]--yes \f[R]
.RS 2
.RS
don\[cq]t ask me; i answer yes
.RE
.RE
.IP \[bu] 2
\f[B]-v --verbose \f[R]
.RS 2
.RS
use\ \ \ -v=1 to silence, also use -v- ** overwrite RCverbose**
.PD 0
.P
.PD
\ \ \ \ \ \ -v=2 erros(default) -v FAIL is the same
.PD 0
.P
.PD
\ \ \ \ \ \ -v=3 (same -v) userinfo
.PD 0
.P
.PD
\ \ \ \ \ \ -vv\ \ -v=4 info
.PD 0
.P
.PD
\ \ \ \ \ \ -vvv -v=5 developer
.RE
.RE
.IP \[bu] 2
\f[B]-s --noscreen \f[R]
.RS 2
.RS
In case of UserCMD\[cq]s like `--list' make screen for output.
.PD 0
.P
.PD
all UserMsg are saved only in the log.
to turn off noscreen use -s- \f[B]overwrite RCnoscreen\f[R]
.RE
.RE
.IP \[bu] 2
\f[B]-a --ansi on/off/-/+ \f[R]
.RS 2
.RS
Ansicolor at find/info/list -a- off -a=On or only -a is on
.PD 0
.P
.PD
colors can be tuned in the config file \f[B]overwrite: RCansicolor\f[R]
.RE
.RE
.IP \[bu] 2
\f[B]-l --list \f[R]
.RS 2
.RS
print out database contens
.RE
.RE
.IP \[bu] 2
\f[B]--listdir \f[R]
.RS 2
.RS
print only dirs from database see: --recursive
.RE
.RE
.IP \[bu] 2
\f[B]-f --formout \f[R]
.RS 2
.RS
Format Out to UserLevel
.PD 0
.P
.PD
Singleline :ONELINE, LONGLINE, MAXLINE
.PD 0
.P
.PD
Multiline: :MINI, BASIC, MEDIUM, ALL
.RE
.RE
.IP \[bu] 2
\f[B]-r --recursive \f[R]
.RS 2
.RS
list subdirs too \f[I]-r=deep\f[R] can go deeper \f[I]`-r'\f[R] lists
everything
.RE
.RE
.IP \[bu] 2
\f[B]-i --info <dir>or<path>or\[at]<id> \f[R]
.RS 2
.RS
Info about file in path <entrie> in database
.PD 0
.P
.PD
path like /name/too
.PD 0
.P
.PD
path without starting `/' will find with \[cq]*\[cq] case intensive
.RE
.RE
.IP \[bu] 2
\f[B]--find \f[R]
.RS 2
.RS
same as info, but finddir is not implemented
.RE
.RE
.IP \[bu] 2
\f[B]--infodir <dir>or\[at]<id> \f[R]
.RS 2
.RS
Info about file in dir <places> in database
.RE
.RE
.IP \[bu] 2
\f[B]--remove <dir>or<path> \f[R]
.RS 2
.RS
remove entrie or a complete path(include entries/subdirs) from DB
.PD 0
.P
.PD
you must confirmed (Y/N) (or use --yes)
.RE
.RE
.IP \[bu] 2
\f[B]--finddupes <dir> \f[R]
.RS 2
.RS
find dupes beginn at <dir> or start in base.
This can take a while
.RE
.RE
.IP \[bu] 2
\f[B]-t --testdb [OPTIONS] \f[R]
.RS 2
.RS
\f[I]OPTIONS\f[R] are [r],count,[size],[path], where\&...
.PD 0
.P
.PD
\f[I][r]\f[R]\ \ \ \ optional will activate the random Mode *
.PD 0
.P
.PD
\f[I]count\f[R]\ \ of Files that will checked
.PD 0
.P
.PD
\f[I][size]\f[R] optional size that will never reached.
You can use 10TB or 500k
.PD 0
.P
.PD
\f[I][path]\f[R] optional, if not set then start check from BASE
.PD 0
.P
.PD
.IP \[bu] 2
if no random activated, then oldest (from lastchk) will checked
.RS 2
.RE
.RE
.RE
.IP \[bu] 2
\f[B]-e --emergency [OPTIONS] \f[R]
.RS 2
.RS
PANIC,ABORT=<errorlevel>,SKIP,COUNT=<num>,UPDATE,UPDATEALL
\f[B]overwrite: RCemergency\f[R]
.PD 0
.P
.PD
\f[I]PANIC\f[R]\ \ \ \ \ \ \ \ : Abort all, use Errorlevel 99 to exit
.PD 0
.P
.PD
\f[I]ABORT\f[R][=<el>] : Abort with Errorlevel 1, if <el>(2-98) is set,
then el is use
.PD 0
.P
.PD
\f[I]SKIP\f[R]\ \ \ \ \ \ \ \ \ : Skip this to COUNT, then abort
.PD 0
.P
.PD
\f[I]COUNT\f[R]=<num>\ \ : Skip not forever, only for this <num>
.PD 0
.P
.PD
\f[I]UPDATE\f[R]\ \ \ \ \ \ \ : Update lastchk and chkcount in DB
.PD 0
.P
.PD
\f[I]UPDATEALL\f[R]\ \ \ \ : Update size,fmtime,crc32 as found too
.RE
.RE
.IP \[bu] 2
\f[B]--wbs <size> \f[R]
.RS 2
.RS
Warning big size Files default is 16GB \f[B]overwrite:
RCwarnbigsize\f[R]
.RE
.RE
.SH ENVIRONMENT
.PP
siehe Anschnitt: \f[B]hsguard.rc\f[R]
.PP
.SH /etc/hsguard.rc
.PP
.SS DATABASE=
.PP
Die Datenbank selbst.
Diese kann sinnvoll unter /var sein.
Zusammen mit \[en]initDB kann diese als Grundkonfig erstellt werden.
Daf\[:u]r muss diese Lese-/Schreibrechte haben.
| --db \[:u]berschreibt die im RC-File angegebene Datei
.PP
.SS BASE=
.PP
BASIS alles was angegeben wird.
Ab wo soll die Datenbank erstellt werden.
Diese Zeile sollte unbedingt angepasst werden.
ZB.
kann der Pfad zu den sch\[:u]tzendwerten Daten /server/pictures oder
\[:a]hnlichem.
-b \[:u]berschreibt das
.PP
.SS VERBOSE=
.PP
stellt den Loglevel dar.
Je h\[:o]her der Level je mehr Informationen zu den erledigten Aufgaben
findet man im Logfile bzw.
auf dem Bildschirm.
Feiner getunt \[:u]ber den Spezialswitch \[en]noscreen Verboselevel wird
von 0-4 oder besser unterst\[:u]tzt:
.IP \[bu] 2
\f[V]ROOT  0 :\f[R] Nur Systemfehler
.IP \[bu] 2
\f[V]FAIL  1 :\f[R] Nur Nachrichten, die Fehler beinhalten
.IP \[bu] 2
\f[V]USER  2 :\f[R] Standardeinstellung Es werden Informationen zu Start
und Ende einer jeden Aktion ausgegeben
.IP \[bu] 2
\f[V]INFO  3 :\f[R] Das k\[:o]nnen sehr viele Nachrichten sein
.IP \[bu] 2
\f[V]DEVL  4 :\f[R] Das sollte man sich besser nicht ansehen, diese sind
nur f\[:u]r Entwickler gedacht
.PP
.SS EXCLUDE=
.PP
Es gibt Ordner die muessen nicht durchsucht werden, zB.
TempOrdner oder der Ordner dieser Datenbank.
Die Dateien/Verzeichnisse werden zeilenweise notiert, die mit `?' und
\[cq]*\[cq] auch Mehrfachausshlu\[ss] zulassen.
Ein `#' am Zeilenanfang ist eine Kommentarzeile.
Mehr zu diesem Thema \f[B]unter: Exclude-File\f[R]\[rq],
.PP
.SS NOSCREEN=
.PP
kann N/Y sein.
Bei Y werden fast alle Ausgaben nur im Logfile vermerkt und nicht mehr
auf dem Bildschirm ausgeben.
Meldungen stehen nur im Logfile zur Verf\[:u]gung.
-s- auf der Kommandozeile kann dieses Verhalten abschalten.
Auch wenn NOSCREEN=Y angegeben wurde.
Es wird empfohlen diese Zeile zum Einrichten auszukommentieren.
.PP
.SS EMERGENCY=
.PP
Hiermit wird festgelegt, wie \[en]testDB bei Fehlern verfahren soll.
Incl.
deren Wiederhohlung.
Ausdr\[:u]cklich wird die Option PANIC empfohlen.
.IP \[bu] 2
\f[V]PANIC     :\f[R] sofortiger Abbruch.
Programmende mit Errorlevel 99
.IP \[bu] 2
\f[V]COUNT=    :\f[R] Es wird die angegebene Zahl von Fehlern
gez\[:a]hlt.
Bei 0 STOP
.IP \[bu] 2
\f[V]SKIP      :\f[R] Es wird gepr\[:u]ft, aber das bleibt ohne weitere
Aktion
.IP \[bu] 2
\f[V]ABORT     :\f[R] Es wird mit Errorlevel 1 \[lq]normal\[rq] beendet.
CONUT!
.IP \[bu] 2
\f[V]UPDATE    :\f[R] Auch im Fehlerfall wird das lastchk Datum neu
gesetzt
.IP \[bu] 2
\f[V]UPDATEALL :\f[R] Wie Oben, nur die neue Size,CRC,FMTime werden
geupdatet
.PP
-e oder \[en]emergency k\[:o]nnen diese Einstellung \[:u]berschreiben
werden
.PP
.SS ANSICOLOR=
.PP
Viele Ausgaben werden, zur besseren Unterscheidung, farblich
unterschiedlich gekennzeichnet.
Y/N kann die Ausgabe von AnsiColors ausschalten.
Bei Y k\[:o]nnen die Farben auch noch variiert werden.
Diese k\[:o]nnen in der Sample-Datei angesehen werden.
.PP
.SS EXADD=
.PP
Hiermit kann eine Datei oder auch ein Verzeichnis ignoriert werden.
Wesentlich besser geht es mit RCexclude.
.PP
.SS WARNWBS
.PP
Dieser Parameter bewirkt das eine \[lq]Warnung\[rq] ausgegeben wird,
wenn ein \[lq]gro\[ss]es File\[rq] erkannt wird.
Das kann sinnvoll sein, wenn die zu pr\[:u]fenden Dateien nicht die
schnellste Verbindung haben.
Damit der Cursor, nicht wie eingefroren, auf der Stelle anzeigefrei
blinkt kann hier eine Dateigr\[:o]\[ss]e einstellt werden.
Die Warnung wird auf Userlevel ausgegeben.
Die Angabe erfolgt Humanlike wie 1TB oder 10MB.
Auf 0 setzen um dieses Verhalten auszuschalten.
Defaultwert ist 16GB.
.PP
.SS FORWARD
.PP
Einmalig kann hier auf eine andere Config verweisen.
Das bietet sich an, wenn man andere Config (z.B.im Netzwerk) verweisen
kann.
Als Feature ist ganz klar, dass auch die Section direkt mit angegeben
werden kann.
Das kann dann so aussehen:
.IP
.nf
\f[C]
FORWARD=/srv/pub/backup.rc,std
\f[R]
.fi
.PP
.SS Exclude Dateien
.PP
Es gibt viele gute Gr\[:u]nde einige Dateien oder ganze
Verzeichnis(b\[:a]ume) auszuschliessen.
Das kann ganz rudiment\[:a]r mit nur einer Datei in der ExcludeDatei
passieren.
Ein Kommentar beginnt mit einem `#'.
Alles folgende ist ein Kommentar.
.PP
Mehrere Dateien k\[:o]nnen jeweils einzeln aufgenommen werden oder
\[:u]ber das eingebaute Fileglobbing eingefangen werden.
Das Dateien die schon ein `ls' einfangen w\[:u]rde, wie \[cq]ls
/var/log/*.log\[cq].
.PP
Dar\[:u]ber hinnaus gibt es einige Schl\[:u]sselw\[:o]rter, die etwas
ausschliessen, wenn eine bestimmte Situation zutrifft.
z.B.:
.IP
.nf
\f[C]
ifhost WKST-Conny /etc/pconly.rc
\f[R]
.fi
.PP
Mit jeder neuen Zeile ist die Situation neu zu bewerten.
Dh.
keine Mehrzeiler.
Daf\[:u]r k\[:o]nnen die `Situationbewertungen' beliebig tief
verschachtelt sein.
Folgendes kann so verwendet werden:
.IP
.nf
\f[C]
ifhost WKST-Conny ifuser werner message \[dq]Mach nix kaputt auf Connys PC\[dq]
\f[R]
.fi
.PP
.TS
tab(@);
r l.
T{
token
T}@T{
Beschreibung
T}
_
T{
ifhost X
T}@T{
Wenn der aktuelle PC X ist
T}
T{
ifnhost X
T}@T{
Wenn der aktuelle PC nicht X ist
T}
T{
ifuser X
T}@T{
Wenn der aktuelle Benutzer X ist
T}
T{
ifnuser X
T}@T{
Wenn der aktuelle Benutzer nicht X ist
T}
T{
ifbase X
T}@T{
BASE=X (-b=X)
T}
T{
ifnbase X
T}@T{
wenn BASE nicht zutrifft
T}
T{
include X
T}@T{
X includen.
Datei X an dieser Stelle einlesen
T}
T{
message X
T}@T{
Diese Nachricht ausgeben
T}
.TE
.SH AUTHORS
.PP
Heiko Stoevesandt - alias Hesti - <hstools@t-online.de>
.SH FEHLER
.PP
Fehler (auch in dieser Manpage) unbedingt bitte melden
